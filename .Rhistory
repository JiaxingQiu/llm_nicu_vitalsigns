# # for each element in list succ, get the $uu out into a list
# uuu_list <- lapply(succ, function(x) x$uuu)
succ <- apply(ts_sub, 1, function(x) describe_succ_inc(x))
source("~/Documents/Documents JoyQiu Work/Research/LLMTimeSeries/llm_nicu_vitalsigns/script/Data/utils/func_describe_succ_inc.R", echo=TRUE)
# # add vertical lines of quantile 25, 50, 75
# abline(v = quantile(as.matrix(ts_sub), 0.25), col = "red")
# abline(v = quantile(as.matrix(ts_sub), 0.5), col = "green")
# abline(v = quantile(as.matrix(ts_sub), 0.75), col = "blue")
# quantile(as.matrix(ts_sub), c(0.05, 0.5, 0.95))
# succ <- apply(ts_sub, 1, function(x) successive_increases(x))
# # for each element in list succ, get the $uu out into a list
# uu_list <- lapply(succ, function(x) x$uu)
# # for each element in list succ, get the $uu out into a list
# uuu_list <- lapply(succ, function(x) x$uuu)
succ <- apply(ts_sub, 1, function(x) describe_succ_inc(x))
succ[[1]]
source("~/Documents/Documents JoyQiu Work/Research/LLMTimeSeries/llm_nicu_vitalsigns/script/Data/utils/func_describe_succ_inc.R", echo=TRUE)
# # add vertical lines of quantile 25, 50, 75
# abline(v = quantile(as.matrix(ts_sub), 0.25), col = "red")
# abline(v = quantile(as.matrix(ts_sub), 0.5), col = "green")
# abline(v = quantile(as.matrix(ts_sub), 0.75), col = "blue")
# quantile(as.matrix(ts_sub), c(0.05, 0.5, 0.95))
# succ <- apply(ts_sub, 1, function(x) successive_increases(x))
# # for each element in list succ, get the $uu out into a list
# uu_list <- lapply(succ, function(x) x$uu)
# # for each element in list succ, get the $uu out into a list
# uuu_list <- lapply(succ, function(x) x$uuu)
succ <- apply(ts_sub, 1, function(x) describe_succ_inc(x))
succ
describe_succ_inc <- function(x){
description <- "There is no consecutive increase."
description2 <- ""
description3 <- ""
results <- successive_increases(x)
if(results$uu>0){
description2 <- paste0("There are ", round(results$uu*100), " percent two consecutive increases.")
}
if(results$uuu>0){
description3 <- paste0("There are ", round(results$uuu*100), " percent three consecutive increases.")
}
if(any(description2!="", description3!="")){
description <- paste0(description2, " ", description3)
}
return(description)
}
# # add vertical lines of quantile 25, 50, 75
# abline(v = quantile(as.matrix(ts_sub), 0.25), col = "red")
# abline(v = quantile(as.matrix(ts_sub), 0.5), col = "green")
# abline(v = quantile(as.matrix(ts_sub), 0.75), col = "blue")
# quantile(as.matrix(ts_sub), c(0.05, 0.5, 0.95))
# succ <- apply(ts_sub, 1, function(x) successive_increases(x))
# # for each element in list succ, get the $uu out into a list
# uu_list <- lapply(succ, function(x) x$uu)
# # for each element in list succ, get the $uu out into a list
# uuu_list <- lapply(succ, function(x) x$uuu)
succ <- apply(ts_sub, 1, function(x) describe_succ_inc(x))
succ
describe_succ_inc <- function(x){
description <- "There is no consecutive increase."
description2 <- ""
description3 <- ""
results <- successive_increases(x)
if(round(results$uu*100)>0){
description2 <- paste0("There are ", round(results$uu*100), " percent two consecutive increases.")
}
if(round(results$uuu*100)>0){
description3 <- paste0("There are ", round(results$uuu*100), " percent three consecutive increases.")
}
if(any(description2!="", description3!="")){
description <- paste0(description2, " ", description3)
}
return(description)
}
# # add vertical lines of quantile 25, 50, 75
# abline(v = quantile(as.matrix(ts_sub), 0.25), col = "red")
# abline(v = quantile(as.matrix(ts_sub), 0.5), col = "green")
# abline(v = quantile(as.matrix(ts_sub), 0.75), col = "blue")
# quantile(as.matrix(ts_sub), c(0.05, 0.5, 0.95))
# succ <- apply(ts_sub, 1, function(x) successive_increases(x))
# # for each element in list succ, get the $uu out into a list
# uu_list <- lapply(succ, function(x) x$uu)
# # for each element in list succ, get the $uu out into a list
# uuu_list <- lapply(succ, function(x) x$uuu)
succ <- apply(ts_sub, 1, function(x) describe_succ_inc(x))
succ
describe_succ_inc <- function(x){
description <- "There is no consecutive increase."
description2 <- ""
description3 <- ""
results <- successive_increases(x)
if(round(results$uu*100)>1){
description2 <- paste0("There are ", round(results$uu*100), " percent two consecutive increases;")
}
if(round(results$uuu*100)>1){
description3 <- paste0("and ", round(results$uuu*100), " percent three consecutive increases.")
}
if(any(description2!="", description3!="")){
description <- paste0(description2, " ", description3)
}
return(description)
}
# # add vertical lines of quantile 25, 50, 75
# abline(v = quantile(as.matrix(ts_sub), 0.25), col = "red")
# abline(v = quantile(as.matrix(ts_sub), 0.5), col = "green")
# abline(v = quantile(as.matrix(ts_sub), 0.75), col = "blue")
# quantile(as.matrix(ts_sub), c(0.05, 0.5, 0.95))
# succ <- apply(ts_sub, 1, function(x) successive_increases(x))
# # for each element in list succ, get the $uu out into a list
# uu_list <- lapply(succ, function(x) x$uu)
# # for each element in list succ, get the $uu out into a list
# uuu_list <- lapply(succ, function(x) x$uuu)
succ <- apply(ts_sub, 1, function(x) describe_succ_inc(x))
succ
succ <- apply(ts_sub, 1, function(x) successive_increases(x))
# for each element in list succ, get the $uu out into a list
uu_list <- lapply(succ, function(x) x$uu)
# for each element in list succ, get the $uu out into a list
uuu_list <- lapply(succ, function(x) x$uuu)
hist(unlist(uu_list), breaks = 100)
hist(unlist(uu_list), breaks = 50)
hist(unlist(uuu_list), breaks = 50)
hist(unlist(uuu_list))
abline(v = quantile(unlist(uu_list), c(0.05,0.25,0.5,0.75,0.95)) col = "red")
abline(v = quantile(unlist(uu_list), c(0.05,0.25,0.5,0.75,0.95)), col = "red")
abline(v = quantile(unlist(uu_list), c(0.025,0.25,0.5,0.75,0.975)), col = "red")
hist(unlist(uu_list), breaks = 50)
abline(v = quantile(unlist(uu_list), c(0.025,0.25,0.5,0.75,0.975)), col = "red")
hist(unlist(uuu_list))
abline(v = quantile(unlist(uuu_list), c(0.025,0.25,0.5,0.75,0.975)), col = "red")
quantile(unlist(uuu_list), c(0.025,0.25,0.5,0.75,0.975))
round(quantile(unlist(uuu_list), c(0.025,0.25,0.5,0.75,0.975)),1)
round(quantile(unlist(uu_list), c(0.025,0.25,0.5,0.75,0.975)),1)
hist(unlist(uu_list)*100, breaks = 50)
abline(v = quantile(unlist(uu_list)*100, c(0.025,0.25,0.5,0.75,0.975)), col = "red")
round(quantile(unlist(uu_list)*100, c(0.025,0.25,0.5,0.75,0.975)),1)
hist(unlist(uu_list)*100, breaks = 50)
abline(v = quantile(unlist(uu_list)*100, c(0.025,0.25,0.5,0.75,0.975)), col = "red")
round(quantile(unlist(uu_list)*100, c(0.025,0.25,0.5,0.75,0.975)),1)
hist(unlist(uuu_list)*100)
abline(v = quantile(unlist(uuu_list)*100, c(0.025,0.25,0.5,0.75,0.975)), col = "red")
round(quantile(unlist(uuu_list)*100, c(0.025,0.25,0.5,0.75,0.975)),1)
round(quantile(unlist(uuu_list)*100, c(0.025,0.25,0.5,0.75,0.975)))
round(quantile(unlist(uu_list)*100, c(0.025,0.25,0.5,0.75,0.975)))
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../../")
print(getwd())
# --- load packages ---
library(readxl)
library(ggplot2)
library(reshape2)
# --- load functions ---
path = paste0("./script/Data/utils")
flst = list.files(path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
# --- load 10-minutes records ---
ts_hr <- read_excel("./data/PAS Challenge HR Data.xlsx")
ts_sp <- read_excel("./data/PAS Challenge SPO2 Data.xlsx")
view_k_row(ts_hr) # viz first 10 rows
view_k_row(ts_sp)
ts_sub <- ts_hr[,3:ncol(ts_hr)]
# ---- general (hist and succ_inc) descriptions ----
succ <- apply(ts_sub, 1, function(x) describe_succ_inc(x))
histo <- apply(ts_sub, 1, function(x) describe_hr_histogram(x))
which(succ == "")
succ
# describing the level of consecutive increases
describe_succ_inc <- function(x){
description <- "There is no consecutive increase."
description2 <- ""
description3 <- ""
results <- successive_increases(x)
if(round(results$uu*100)>1){
description2 <- paste0("There are ", round(results$uu*100), " percent two consecutive increases;")
}
if(round(results$uuu*100)>1){
description3 <- paste0(round(results$uuu*100), " percent three consecutive increases.")
}
if(any(description2!="", description3!="")){
description <- paste0(description2, " ", description3)
}
return(description)
}
# ---- general (hist and succ_inc) descriptions ----
succ <- apply(ts_sub, 1, function(x) describe_succ_inc(x))
succ
# --- load functions ---
path = paste0("./script/Data/utils")
flst = list.files(path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
histo <- apply(ts_sub, 1, function(x) describe_hr_histogram(x))
histo
# describing heart rate variability
describe_hr_histogram <- function(x){
description <- ""
description_constant <- ""
description_normal <- ""
description_high_var <- ""
mean_hr <- round(mean(x), 2)
if(all(x >= mean_hr - 5 & x <= mean_hr + 5)){
description_constant <- paste0("It shows low variability.")
}
if(all(x >= mean_hr - 2.5 & x <= mean_hr + 2.5)){
description_constant <- paste0("It is almost flat.")
}
if(all(x >= 120 & x <= 140)){
description_normal <- "It is within a normal range."
}
if(any(x > mean_hr + 5 | x < mean_hr - 5) ){
# run outlier detection on x using boxplot.stats
boxplot_stats <- boxplot.stats(x)
outliers <- boxplot_stats$out
if(length(outliers) > 0){
description_high_var <- "It shows high variability."
}
}
if(any(description_constant!="", description_normal!="", description_high_var!="")){
description <- paste0(description_constant, " ", description_normal, " ", description_high_var)
}
return(description)
}
histo <- apply(ts_sub, 1, function(x) describe_hr_histogram(x))
histo
# describing heart rate variability
describe_hr_histogram <- function(x){
description <- ""
description_constant <- ""
description_normal <- ""
description_high_var <- ""
mean_hr <- round(mean(x), 2)
if(all(x >= mean_hr - 5 & x <= mean_hr + 5)){
description_constant <- "It shows low variability. "
}
if(all(x >= mean_hr - 2.5 & x <= mean_hr + 2.5)){
description_constant <- paste0(description_constant, " It is almost flat. ")
}
if(all(x >= 120 & x <= 140)){
description_normal <- "It is within a normal range. "
}
if(any(x > mean_hr + 10 | x < mean_hr - 10) ){
# run outlier detection on x using boxplot.stats
boxplot_stats <- boxplot.stats(x)
outliers <- boxplot_stats$out
if(length(outliers) > 0){
description_high_var <- "It shows high variability. "
}
}
if(description_constant!=""){
description <- paste0(description, description_constant)
}
if(description_normal!=""){
description <- paste0(description, description_normal)
}
if(description_high_var!=""){
description <- paste0(description, description_high_var)
}
return(description)
}
histo <- apply(ts_sub, 1, function(x) describe_hr_histogram(x))
histo
# describing heart rate variability
describe_hr_histogram <- function(x){
description <- ""
description_constant <- ""
description_normal <- ""
description_high_var <- ""
mean_hr <- round(mean(x), 2)
if(all(x >= mean_hr - 5 & x <= mean_hr + 5)){
description_constant <- "It shows low variability. "
}
if(all(x >= mean_hr - 2.5 & x <= mean_hr + 2.5)){
description_constant <- paste0(description_constant, " It is almost flat. ")
}
if(all(x >= 120 & x <= 140)){
description_normal <- "It is within a normal range. "
}
if(any(x > mean_hr + 10 | x < mean_hr - 10) ){
# run outlier detection on x using boxplot.stats
boxplot_stats <- boxplot.stats(x)
outliers <- boxplot_stats$out
if(length(outliers) >= 0.05*length(x)){ # more than 5% of the data are outliers
description_high_var <- "It shows high variability. "
}
}
if(description_constant!=""){
description <- paste0(description, description_constant)
}
if(description_normal!=""){
description <- paste0(description, description_normal)
}
if(description_high_var!=""){
description <- paste0(description, description_high_var)
}
return(description)
}
histo <- apply(ts_sub, 1, function(x) describe_hr_histogram(x))
histo
histo <- table(histo)
histo <- apply(ts_sub, 1, function(x) describe_hr_histogram(x))
histo <- unlist(histo)# count unique values
histo <- unlist(apply(ts_sub, 1, function(x) describe_hr_histogram(x)))
table(histo)
# describing heart rate variability
describe_hr_histogram <- function(x){
description <- ""
description_constant <- ""
description_normal <- ""
description_high_var <- ""
mean_hr <- round(mean(x), 2)
if(all(x >= mean_hr - 5 & x <= mean_hr + 5)){
description_constant <- "It shows low variability. "
}
if(all(x >= mean_hr - 2.5 & x <= mean_hr + 2.5)){
description_constant <- paste0(description_constant, " It is almost flat. ")
}
if(all(x >= 120 & x <= 140)){
description_normal <- "It is within a normal range. "
}
if(any(x > mean_hr + 5 | x < mean_hr - 5) ){
# run outlier detection on x using boxplot.stats
boxplot_stats <- boxplot.stats(x)
outliers <- boxplot_stats$out
if(length(outliers) >= 0.05*length(x)){ # more than 5% of the data are outliers
description_high_var <- "It shows high variability. "
}
}
if(description_constant!=""){
description <- paste0(description, description_constant)
}
if(description_normal!=""){
description <- paste0(description, description_normal)
}
if(description_high_var!=""){
description <- paste0(description, description_high_var)
}
return(description)
}
histo <- unlist(apply(ts_sub, 1, function(x) describe_hr_histogram(x)))
table(histo)
# ---- general (hist and succ_inc) descriptions ----
succ <- unlist(apply(ts_sub, 1, function(x) describe_succ_inc(x)))
table(succ)
succ <- apply(ts_sub, 1, function(x) successive_increases(x))
# for each element in list succ, get the $uu out into a list
uu_list <- lapply(succ, function(x) x$uu)
# for each element in list succ, get the $uu out into a list
uuu_list <- lapply(succ, function(x) x$uuu)
hist(unlist(uu_list)*100, breaks = 50)
abline(v = quantile(unlist(uu_list)*100, c(0.025,0.25,0.5,0.75,0.975)), col = "red")
round(quantile(unlist(uu_list)*100, c(0.025,0.25,0.5,0.75,0.975)))
hist(unlist(uuu_list)*100)
abline(v = quantile(unlist(uuu_list)*100, c(0.025,0.25,0.5,0.75,0.975)), col = "red")
round(quantile(unlist(uuu_list)*100, c(0.025,0.25,0.5,0.75,0.975)))
unlist(uu_list)*100 * 2 + unlist(uuu_list)*100*3
umean <- unlist(uu_list)*100 * 2 + unlist(uuu_list)*100*3
umean
hist(umean)
abline(v = quantile(umean, c(0.025,0.25,0.5,0.75,0.975)), col = "red")
round(quantile(umean, c(0.025,0.25,0.5,0.75,0.975)))
describe_succ_inc_summ <- function(x){
description <- "No consecutive increase."
results <- successive_increases(x)
uu = results$uu*100
uuu = results$uuu*100
umean = uu * 2 + uuu * 3
if(umean <= 10){
description <- "Low amount of consecutive increases."
}
if(umean > 10 & umean < 50){
description <- "Moderate amount of consecutive increases."
}
if(umean >= 50){
description <- "High amount of consecutive increases."
}
return(description)
}
# ---- general (hist and succ_inc) descriptions ----
succ <- unlist(apply(ts_sub, 1, function(x) describe_succ_inc_summ(x)))
table(succ)
describe_succ_inc_summ <- function(x){
description <- "No consecutive increase."
results <- successive_increases(x)
uu = results$uu*100
uuu = results$uuu*100
umean = uu * 2 + uuu * 3
if(umean < 10){
description <- "Very low amount of consecutive increases."
}
if(umean >= 10 & umean < 50){
description <- "Low amount of consecutive increases."
}
if(umean >= 50 & umean < 90){
description <- "Moderate amount of consecutive increases."
}
if(umean >= 90 & umean < 120){
description <- "High amount of consecutive increases."
}
if(umean >= 120){
description <- "Very high amount of consecutive increases."
}
return(description)
}
# ---- general (hist and succ_inc) descriptions ----
succ <- unlist(apply(ts_sub, 1, function(x) describe_succ_inc_summ(x)))
table(succ)
# ---- general (hist and succ_inc) descriptions ----
df_desc <- ts_sub[,c(1,2)]
df_desc <- ts_sub[,c(1,2)]
succ <- unlist(apply(ts_sub, 1, function(x) describe_succ_inc_summ(x)))
df_desc$description_succ_inc <- succ
histo <- unlist(apply(ts_sub, 1, function(x) describe_hr_histogram(x)))
df_desc$description_histogram <- histo
df_desc
View(df_desc)
# ---- general (hist and succ_inc) descriptions ----
df_desc <- ts_sub[,c(1:2)]
View(df_desc)
# ---- general (hist and succ_inc) descriptions ----
df_desc <- ts_hr[,c(1:2)]
succ <- unlist(apply(ts_sub, 1, function(x) describe_succ_inc_summ(x)))
df_desc$description_succ_inc <- succ
histo <- unlist(apply(ts_sub, 1, function(x) describe_hr_histogram(x)))
df_desc$description_histogram <- histo
# ---- general (hist and succ_inc) descriptions ----
df_desc <- ts_hr[,c(1:2)]
succ <- unlist(apply(ts_sub, 1, function(x) describe_succ_inc_summ(x)))
df_desc$description_succ_inc <- succ
histo <- unlist(apply(ts_sub, 1, function(x) describe_hr_histogram(x)))
df_desc$description_histogram <- histo
view_k_row(ts_hr, i_row=1)
# --- load functions ---
path = paste0("./script/Data/utils")
flst = list.files(path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
# ---- general (hist and succ_inc) descriptions ----
df_desc <- ts_hr[,c(1:2)]
succ <- unlist(apply(ts_sub, 1, function(x) describe_succ_inc_summ(x)))
df_desc$description_succ_inc <- succ
histo <- unlist(apply(ts_sub, 1, function(x) describe_hr_histogram(x)))
df_desc$description_histogram <- histo
view_k_row(ts_hr, i_row=1)
View(df_desc)
view_k_row(ts_hr, i_row=2)
view_k_row(ts_hr, i_row=3)
view_k_row(ts_hr, i_row=4)
view_k_row(ts_hr, i_row=31)
events80 <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = 80, plot=F, type = 0))
events90 <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = 90, plot=F, type = 0))
events100 <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = 100, plot=F, type = 0))
# apply the function to each row_index of ts_sub
most_severe_events <- sapply(seq(1,nrow(ts_sub)), get_most_severe_event)
events80 <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = 80, plot=F, type = 0))
events90 <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = 90, plot=F, type = 0))
events100 <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = 100, plot=F, type = 0))
most_severe_events <- sapply(seq(1,nrow(ts_sub)), get_most_severe_event)
row_index <- which(!is.na(most_severe_events))
df_desc$description_ts_event[row_index] <-  most_severe_events[row_index]
ts_sub <- ts_hr[,3:ncol(ts_hr)]
df_desc <- ts_hr[,c(1:2)]
succ <- unlist(apply(ts_sub, 1, function(x) describe_succ_inc_summ(x)))
df_desc$description_succ_inc <- succ
histo <- unlist(apply(ts_sub, 1, function(x) describe_hr_histogram(x)))
df_desc$description_histogram <- histo
events80 <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = 80, plot=F, type = 0))
events90 <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = 90, plot=F, type = 0))
events100 <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = 100, plot=F, type = 0))
most_severe_events <- sapply(seq(1,nrow(ts_sub)), get_most_severe_event)
row_index <- which(!is.na(most_severe_events))
row_index
most_severe_events[row_index]
df_desc$description_ts_event <- ""
df_desc$description_ts_event[row_index] <- most_severe_events[row_index]
View(df_desc)
write.csv(df_desc, "./data/hr_descriptions.csv", row.names = F)
# ----- augmented ------
ts_hr_aug <- read.csv("./data/hr_aug.csv")
ts_sub <- ts_hr_aug[,c(2:302)]
View(ts_sub)
table(df_desc$description_succ_inc)
View(df_desc)
table(df_desc$description_histogram)
x = ts_sub[0,:]
x = ts_sub[0,]
x
ts_sub
ts_sub <- ts_hr[,3:ncol(ts_hr)]
ts_sub
View(ts_sub)
x = ts_sub[0,]
x
x
x = ts_sub[1,]
x
x = ts_sub[1,]
x
plot(x)
View(x)
plot(seq_along(x),x)
th = 100
direction = ">"
threshold_event(x, th, direction)
x = ts_sub[1,]
plot(seq_along(x),x)
th = 100
direction = "<"
threshold_event(x, th, direction)
events80 <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = 80, plot=F, type = 0))
events80
table(df_desc$description_succ_inc)
most_severe_events <- sapply(seq(1,nrow(ts_sub)), get_most_severe_event)
most_severe_events
most_severe_events
