data = df_mdl,
id = df_mdl$id,
link = "logit",
LORstr = "independence"
)
summary(mdl_gee)
save(mdl_gee,file="./rob/gee.RData")
} else{
load("./rob/gee.RData")
}
if(!file.exists("./rob/gee_uniform.RData")){
## experiment different types of cor str in gee
mdl_gee_uniform <- ordLORgee(y ~ rcs(age,3) + sex + tx + rcs(day,3) + catg(yfirst),
data = df_mdl,
id = df_mdl$id,
link = "logit",
LORstr = "uniform"
)
save(mdl_gee_uniform, file="./rob/gee_uniform.RData") #This option assumes that the local odds ratios are the same (uniform) across all categories or time points. It implies a consistent relationship between the outcomes regardless of which specific categories or time points are being compared.
# get local odds ratio
# dim(mdl_gee$local.odds.ratios$theta) # the marginalized local odds ratios structure variables.
# 7*27 = 189 n_states * n_time
# 189 * 189
# #  ---- check residuals ----
# df_mdl$residuals <- rowMeans( mdl_gee_uniform$residuals)
#
# ggplot(df_mdl[df_mdl$id%in%sampled_df$id,], aes(x = as.factor(id), y = residuals)) +
#   geom_boxplot() +
#   theme_minimal() +
#   theme(axis.text.x = element_text(angle = 90, hjust = 1))
# df_mdl$y_pred <- max.col(mdl_gee_uniform$fitted.values, ties.method = "first")
# df_mdl$y_diff <- as.numeric(df_mdl$y_pred) - as.numeric(df_mdl$y)
#
# ggplot(df_mdl[df_mdl$id%in%sampled_df$id,], aes(x = as.factor(id), y = y_diff)) +
#   geom_boxplot() +
#   theme_minimal() +
#   theme(axis.text.x = element_text(angle = 90, hjust = 1))
}else{
load("./rob/gee_uniform.RData")
}
# the following correlation structures don't converge
# mdl_gee_cat_exch <- ordLORgee(y ~ rcs(age,3) + sex + tx + rcs(day,3) + catg(yfirst),
#                     data = df_mdl,
#                     id = df_mdl$id,
#                     link = "logit",
#                     bstart = coef(mdl_gee),
#                     LORstr = "category.exch"
#                     )#This option assumes a category exchangeable structure, meaning the local odds ratios are constant across different categories within the same time point, but they can vary between different time points.
# # bstart a vector that includes an initial estimate for the marginal regression parameter vector.
#
# load("./rob/gee_uniform.RData")
# mdl_gee_tim_exch <- ordLORgee(y ~ rcs(age,3) + sex + tx + rcs(day,3) + catg(yfirst),
#                     data = df_mdl,
#                     id = df_mdl$id,
#                     link = "probit",
#                     bstart = coef(mdl_gee_uniform),
#                     LORstr = "time.exch" ) #This option assumes a time exchangeable structure, where the local odds ratios are constant across different time points for the same category but can vary between different categories.
# ordinal random effects model, account for cluster heterogeneity using random intercept
if(!file.exists("./rob/re.RData")){
mdl_re <- clmm(y ~ rcs(age,3) + sex + tx + rcs(day,3) + (1 | id),
data = df_mdl,
link = "logit") # no hessian
summary(mdl_re)
AIC(mdl_re)  # 50410.32 = -2*mdl_re$logLik + 2*14
# this turns out to be the marginal AIC,
# they don't document which AIC their package is returning, marginal or conditional??!!
# dim(solve(mdl_re$Hessian))
# length(mdl_re$gradient)
# g <- as.matrix(mdl_re$gradient,ncol=14,nrow=1)
# fisher <- g  %*% t(g)
# sum(diag(solve(mdl_re$Hessian) %*% fisher))
mdl_re1 <- clmm(y ~ rcs(age,3) + sex + tx + rcs(day,3) + (1 + rcs(day,3) | id),
data = df_mdl,
link = "probit") # no hessian
summary(mdl_re1)
AIC(mdl_re1)  # 37560.25 yes!
mdl_re2 <- clmm(y ~ rcs(age,5) + sex + tx + rcs(day,5) + (1  + rcs(day,5) | id),
data = df_mdl,
link = "probit") # AIC =  # hessian not available
summary(mdl_re1)
AIC(mdl_re1)  # 37560.25 yes!
# library(brms)
# mdl_bre <- brm(y ~ age + sex + tx + day + (1|id), data=df_mdl, family=cumulative("logit"))
# LOO(mdl_bre)
save(mdl_re, mdl_re1, file="./rob/re.RData")
}else{
load("./rob/re.RData")
}
# ordinal random effects model, account for cluster heterogeneity using random intercept
if(!file.exists("./cor/re.RData")){
mdl_re_cor <- clmm(y ~ rcs(age,3) + sex + tx + yprev + rcs(day,5) + (1 | id),
data = df_mdl,
link = "logit") # no hessian
summary(mdl_re_cor)
AIC(mdl_re_cor)
# 1.01e-06 0.001005 random intercept variance
# this turns out to be the marginal AIC  = -2*mdl_re$logLik + 2*n_param
# they don't document which AIC their package is returning, marginal or conditional??!!
# dim(solve(mdl_re$Hessian))
# length(mdl_re$gradient)
# g <- as.matrix(mdl_re$gradient,ncol=14,nrow=1)
# fisher <- g  %*% t(g)
# sum(diag(solve(mdl_re$Hessian) %*% fisher))
save(mdl_re_cor, file="./cor/re.RData")
}else{
load("./cor/re.RData")
}
mdl_name <- c("Standard PO",
"Standard PO w/ lag1",
"GEE (indepedence)",
"GEE (uniform)",
"GEE (indepedence) w/ lag1",
"RE (1|id)",
"RE (1+rcs(day,3)|id)",
"RE (1|id) w/ lag1")
aic_name <- round(c(AIC(mdl_orm),
AIC(mdl_orm_cor),
AIC(mdl_rob),
NA,
AIC(mdl_rob_cor),
AIC(mdl_re),
AIC(mdl_re1),
AIC(mdl_re_cor)),2)
aic_name[is.na(aic_name)] <- "QIC NA"
treatment_odds_ratio <- c(exp(coef(mdl_orm)[["tx=Active"]]),
exp(coef(mdl_orm_cor)[["tx=Active"]]),
exp(coef(mdl_rob)[["tx=Active"]]),
exp(coef(mdl_gee_uniform)[["txActive"]]),
exp(coef(mdl_rob_cor)[["tx=Active"]]),
exp(coef(mdl_re)[["txActive"]]),
exp(coef(mdl_re1)[["txActive"]]),
exp(coef(mdl_re_cor)[["txActive"]]) )
treatment_p <- c("<0.0001",
0.2385,
0.0037,
0.0426,
0.2372,
0.0084,
0.373,
NA)
treatment_p[is.na(treatment_p)] <- "Hessian NA"
compare_table <- data.frame("Model" = mdl_name,
"AIC" = aic_name,
"Treatment Odds Ratio" = treatment_odds_ratio,
"p-value" = treatment_p)
compare_table <- rbind(compare_table[c(1,3,6),], compare_table[c(4,7),], compare_table[c(2,5,8),])
compare_table$temporal_correlation<-c(rep("none",3),
rep("implicit",2),
rep("explicit",3))
compare_table <- compare_table[,c("adjust_temporal_correlation",setdiff(colnames(compare_table),"temporal_correlation"))]
robcov(orm(y ~ rcs(age,3) + sex + tx*catg(yprev) + rcs(day,5), data=df_mdl, x=TRUE, y=TRUE), cluster = df_mdl$id)
# Generate prediction data
pred_data <- Predict(mdl_rob_cor)
# Create the plot
ggplot(pred_data, aes(x = x, y = yhat)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
facet_wrap(~ variable, scales = "free") +
labs(x = "Predictor Value", y = "Predicted Outcome",
title = "Predicted Relationships with Free Scales") +
theme_minimal()
pred_data
# Create the plot
ggplot(pred_data, aes(x = x, y = yhat)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
facet_wrap(~ .predictor., scales = "free") +
labs(x = "Predictor Value", y = "Predicted Outcome",
title = "Predicted Relationships with Free Scales") +
theme_minimal()
# Create the plot
ggplot(pred_data, aes(x = x, y = yhat)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
facet_wrap(~ predictor, scales = "free") +
labs(x = "Predictor Value", y = "Predicted Outcome",
title = "Predicted Relationships with Free Scales") +
theme_minimal()
pred_data$predictor <- pred_data$.predictor.
# Create the plot
ggplot(pred_data, aes(x = x, y = yhat)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
facet_wrap(~ predictor, scales = "free") +
labs(x = "Predictor Value", y = "Predicted Outcome",
title = "Predicted Relationships with Free Scales") +
theme_minimal()
pred_data
ggplot(Predict(mdl_rob_cor))
ggplot(Predict(mdl_rob_cor, age))
p_age <- ggplot(Predict(mdl_rob_cor, age))
p_age <- ggplot(Predict(mdl_rob_cor, age)) + ylim(0,5)
p_age
p_y_prev <- ggplot(Predict(mdl_rob_cor, y_prev))
p_y_prev
p_y_prev <- ggplot(Predict(mdl_rob_cor, y_prev))
p_yprev <- ggplot(Predict(mdl_rob_cor, yprev))
p_yprev
p_age <- ggplot(Predict(mdl_rob_cor, age))
p_day <- ggplot(Predict(mdl_rob_cor, day))
p_yprev <- ggplot(Predict(mdl_rob_cor, yprev))
p_tx <- ggplot(Predict(mdl_rob_cor, tx))
p_sex <- ggplot(Predict(mdl_rob_cor, sex))
ggarrange(p_age,p_day, p_yprev, p_tx, p_sex, ncol=3, nrow=2)
# ggplot(Predict(mdl_rob_cor))
p_age <- ggplot(Predict(mdl_rob_cor, age), ylim. = c(0,5))
p_age
p_age <- ggplot(Predict(mdl_rob_cor, age), ylim. = c(0,2))
p_day <- ggplot(Predict(mdl_rob_cor, day), ylim. = c(0,2))
p_yprev <- ggplot(Predict(mdl_rob_cor, yprev))
p_tx <- ggplot(Predict(mdl_rob_cor, tx))
p_sex <- ggplot(Predict(mdl_rob_cor, sex))
ggarrange(p_age,p_day, p_yprev, p_tx, p_sex, ncol=3, nrow=2)
p1 <- rms::bplot(rms::Predict(mdl_rob_cor, age, yprev), ylabrot=90,adj.subtitle=FALSE)
p2 <- rms::bplot(rms::Predict(mdl_rob_cor, day, yprev), ylabrot=90,adj.subtitle=FALSE)
p3 <- rms::bplot(rms::Predict(mdl_rob_cor, age, day),ylabrot=90,adj.subtitle=FALSE)
ggarrange(p1,p2,p3, ncol=3)
source("~/.active-rstudio-document", echo=TRUE)
# ggplot(Predict(mdl_rob_cor))
p_age <- ggplot(Predict(mdl_rob_cor, age, fun = exp), ylim. = c(0,2))
p_day <- ggplot(Predict(mdl_rob_cor, day, fun = exp), ylim. = c(0,2))
p_yprev <- ggplot(Predict(mdl_rob_cor, yprev, fun = exp))
p_tx <- ggplot(Predict(mdl_rob_cor, tx, fun = exp))
p_sex <- ggplot(Predict(mdl_rob_cor, sex, fun = exp))
ggarrange(p_age,p_day, p_yprev, p_tx, p_sex, ncol=2, nrow=3)
# pred_probs <- predict(mdl_rob, type = "fitted.ind")
# df_mdl$y_pred <- max.col(pred_probs, ties.method = "first")
# table(df_mdl$y_pred, df_mdl$y)
# ggplot(Predict(mdl_rob_cor))
p_age <- ggplot(Predict(mdl_rob_cor, age), ylim. = c(0,2))
p_day <- ggplot(Predict(mdl_rob_cor, day), ylim. = c(0,2))
p_yprev <- ggplot(Predict(mdl_rob_cor, yprev))
p_tx <- ggplot(Predict(mdl_rob_cor, tx))
p_sex <- ggplot(Predict(mdl_rob_cor, sex))
ggarrange(p_age,p_day, p_yprev, p_tx, p_sex, ncol=2, nrow=3)
# pred_probs <- predict(mdl_rob, type = "fitted.ind")
# df_mdl$y_pred <- max.col(pred_probs, ties.method = "first")
# table(df_mdl$y_pred, df_mdl$y)
# ggplot(Predict(mdl_rob_cor))
p_age <- ggplot(Predict(mdl_rob_cor, age), ylim. = c(0,2), ylab = "log odds of a worse outcome")
p_day <- ggplot(Predict(mdl_rob_cor, day), ylim. = c(0,2), ylab = "log odds of a worse outcome")
p_yprev <- ggplot(Predict(mdl_rob_cor, yprev))
p_tx <- ggplot(Predict(mdl_rob_cor, tx))
p_sex <- ggplot(Predict(mdl_rob_cor, sex))
ggarrange(p_age,p_day, p_yprev, p_tx, p_sex, ncol=2, nrow=3)
# pred_probs <- predict(mdl_rob, type = "fitted.ind")
# df_mdl$y_pred <- max.col(pred_probs, ties.method = "first")
# table(df_mdl$y_pred, df_mdl$y)
x <- rnorm(10000, 0,1)
x <- rnorm(10000, 0,1)
y <- 2*x
plot(x,y)
y <- 2*x^2
plot(x,y)
y <- 2*x^2 + rnorm(10000, 0, 0.1)
plot(x,y)
y <- 2*x^2 + rnorm(10000, 0, 0.5)
plot(x,y)
cor(x,y,method="spearman")
cor(x,y,method="pearson")
y <- 2*exp(x) + rnorm(10000, 0, 0.5)
cor(x,y,method="pearson")
cor(x,y,method="spearman")
citation(glmmTMB)
citation("glmmTMB")
?glmmTMB
??glmmTMB
citation("glmmTMB")
citation("R")
citation(R)
# 1. answer_df
# run "~/Documents/Documents JoyQiu Work/Research/ED Media/network/script/llm/data_clean_in_r_with_EOS.R" first
df_llm <- read.csv("/Users/joyqiu/Documents/Documents JoyQiu Work/Research/ED Media/network/script/llm/sm_eos.csv", stringsAsFactors = F)
answer_df <- df_llm[,c("sm_id", "text_w_eos")]
# answer_df1 <- answer_df[1:30000,]
# answer_df2 <- answer_df[30001:nrow(answer_df),]
# stopifnot(nrow(answer_df2) + nrow(answer_df1) == nrow(answer_df))
# setdiff(union(answer_df2$sm_id, answer_df1$sm_id), answer_df$sm_id)
# setdiff(answer_df$sm_id, union(answer_df2$sm_id, answer_df1$sm_id))
#
# write.csv(answer_df1, "/Users/joyqiu/Documents/Documents JoyQiu Work/Research/LLMTopicExtraction/llm_topic_extraction/data/answer_df_raw1.csv", row.names = F)
# write.csv(answer_df2, "/Users/joyqiu/Documents/Documents JoyQiu Work/Research/LLMTopicExtraction/llm_topic_extraction/data/answer_df_raw2.csv", row.names = F)
write.csv(answer_df, "/Users/joyqiu/Documents/Documents JoyQiu Work/Research/LLMTopicExtraction/llm_topic_extraction/data/answer_df_raw.csv", row.names = F)
read.csv("/Users/joyqiu/Documents/Documents JoyQiu Work/Research/ED Media/network/script/tmp/may2015.csv")
df <- read.csv("/Users/joyqiu/Documents/Documents JoyQiu Work/Research/ED Media/network/script/tmp/may2015.csv")
View(df)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../")
print(getwd())
# --- load packages ---
library(readxl)
library(ggplot2)
library(reshape2)
# --- load functions ---
path = paste0("./script/utils")
flst = list.files(path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
# --- load 10-minutes records ---
ts_hr <- read_excel("./data/PAS Challenge HR Data.xlsx")
ts_sp <- read_excel("./data/PAS Challenge SPO2 Data.xlsx")
view_k_row(ts_hr) # viz first 10 rows
view_k_row(ts_sp)
# --- load patient demo ---
df_outc <- read_excel("./data/PAS Challenge Outcome Data.xlsx")
df_demo <- read_excel("./data/PAS Challenge Demographic Data.xlsx")
# --- brady 80 (heart rate < 80) ---
th <- 80
rows <- apply(ts_hr[,3:ncol(ts_hr)], 1, function(x) any(x < th))
ts_sub <- ts_hr[rows,3:ncol(ts_hr)]
view_k_row(ts_sub, i_row = 2, vs = 'HR')
# apply function threshold_events(x, th, "<") to each row (x) of dataframe ts_sub
events <- apply(ts_sub, 1, function(x) threshold_event(x, th = th, direction = "<"))
events <- apply(ts_sub, 1, function(x) threshold_event_extra(x, th = th, direction = "<"))
events <- apply(ts_sub, 1, function(x) threshold_event_filtered(x, th = th, direction = "<"))
events <- apply(ts_sub, 1, function(x) describe_event(x, th = th, plot=F, type = 1))
events <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = th, plot=F, type = 1))
# sample 10 infants to take a look
for(i in sample(1:nrow(ts_sub),20) ){
# threshold_event_filtered(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T)
print(describe_brady_event(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T, type=4))
}
# --- load functions ---
path = paste0("./script/utils")
flst = list.files(path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
# sample 10 infants to take a look
for(i in sample(1:nrow(ts_sub),20) ){
# threshold_event_filtered(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T)
print(describe_brady_event(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T, type=4))
}
event
# sample 10 infants to take a look
for(i in sample(1:nrow(ts_sub),20) ){
# threshold_event_filtered(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T)
print(describe_brady_event(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T, type=4))
}
# sample 10 infants to take a look
for(i in sample(1:nrow(ts_sub),20) ){
# threshold_event_filtered(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T)
print(describe_brady_event(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T, type=4))
}
# sample 10 infants to take a look
for(i in sample(1:nrow(ts_sub),20) ){
# threshold_event_filtered(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T)
print(describe_brady_event(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T, type=4))
}
i
i = 530
describe_brady_event(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T, type=4)
x=as.numeric(unlist(ts_sub[i,]))
plot=T
type=4)
type=4
# description string to return
description <- ""
context <- paste0("This is a heart rate time series from a NICU infant. A Bradycardia event is defined as heart rate drop below ",th,". \n ")
events <- threshold_event_filtered(x, th, direction, plot=plot)
event_descriptions <- list()
direction = "<"
# description string to return
description <- ""
context <- paste0("This is a heart rate time series from a NICU infant. A Bradycardia event is defined as heart rate drop below ",th,". \n ")
events <- threshold_event_filtered(x, th, direction, plot=plot)
event_descriptions <- list()
direction = "<"
# description string to return
description <- ""
context <- paste0("This is a heart rate time series from a NICU infant. A Bradycardia event is defined as heart rate drop below ",th,". \n ")
events <- threshold_event_filtered(x, th, direction, plot=plot)
event_descriptions <- list()
events
threshold_event_filtered <- function(x, th, direction = "<", plot = F){
events <- threshold_event_extra(x, th, direction)
events <- lapply(events, function(event) {
return(c(event,
"duration" = as.numeric(event['end'] - event['start'] + 1),
"drop_rate" = as.numeric(x[event['start']] - x[event['onset']]) / as.numeric(event['start'] - event['onset'] + 1),
"back_rate" = as.numeric(x[event['offset']] - x[event['end']]) / as.numeric(event['offset'] - event['end'] + 1)
)) })
if(length(events)>0){
# filter 1: duration in [5, 200) # filter 2: drop_rate < 0 and back_rate > 0
indices <- sapply(events, function(event) event['duration'] >= 5 & event['duration'] < 200 & event['drop_rate'] < 0 & event['back_rate'] > 0 )
events <- events[indices]
}
if(length(events)>0){
if(plot){
time_index <- seq_along(x)
for(event in events){
plot(time_index, x, type = "l", col = "blue", main = "Event timepoints", xlab = "Time", ylab = "Value", ylim = range(x))
points(event['start'], x[event['start']], col = "red", pch = 19, cex = 1)
points(event['end'], x[event['end']], col = "red", pch = 19, cex = 1)
points(event['onset'], x[event['onset']], col = "orange", pch = 19, cex = 1)
points(event['offset'], x[event['offset']], col = "orange", pch = 19, cex = 1)
}
}
}
# Remove empty elements
events <- events[sapply(events, function(x) !is.null(x) && length(x) != 0)]
return(events)
}
# description string to return
description <- ""
context <- paste0("This is a heart rate time series from a NICU infant. A Bradycardia event is defined as heart rate drop below ",th,". \n ")
events <- threshold_event_filtered(x, th, direction, plot=plot)
events
event_descriptions <- list()
if(length(events)>0){
for(i in seq_along(events)){
event <- events[[i]]
# ground-truth description generation
# easy
if(type == 1){
event_descriptions[[i]] <- paste0("There was a Bradycardia event (heart rate below ",th, " beats per minute",") from time ", event['start'], " to ",event['end'],".")
}
if(type == 2){
event_descriptions[[i]] <- paste0("Since time ",round(event['start'])," the heart rate remained below ",th," for ",event['duration']," time points. ",
"Then the heart rate increased to ",x[event['offset']], " beats per minute",".")
}
# hard
if(type == 3) {
event_descriptions[[i]] <- paste0("Since time around ", round(event['onset']), ", ",
"the heart rate began to drop, falling below ",th, " beats per minute"," at time ", round(event['start']), ", ",
"and remained below ",th," for the next ", round(event['duration']), " time points.")
}
if(type == 4){
drop_fast <- event['drop_rate'] < (-5)
back_fast <- event['drop_rate'] > 5
event_descriptions[[i]] <- paste0("The heart rate started to drop from around", x[event['onset']], " beats per minute", ifelse(drop_fast, " fastly ", " "), "since time ", round(event['onset']),". ",
"After remaining below ",th, " beats per minute"," for ",event['duration']," time points, ",
"the heart rate increased to around ", x[event['offset']], " beats per minute", ifelse(back_fast, " fastly.",".") )
}
event_descriptions[[i]]  <- paste0("Event ",i,": ", event_descriptions[[i]])
}
}
if(length(event_descriptions)>0){
description <- paste0(context, paste0(event_descriptions, collapse = " \n "))
}
i = 530
describe_brady_event(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T, type=4)
# sample 10 infants to take a look
for(i in sample(1:nrow(ts_sub),20) ){
# threshold_event_filtered(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T)
print(describe_brady_event(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T, type=4))
}
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../")
print(getwd())
# --- load packages ---
library(readxl)
library(ggplot2)
library(reshape2)
# --- load functions ---
path = paste0("./script/utils")
flst = list.files(path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
# --- load 10-minutes records ---
ts_hr <- read_excel("./data/PAS Challenge HR Data.xlsx")
ts_sp <- read_excel("./data/PAS Challenge SPO2 Data.xlsx")
view_k_row(ts_hr) # viz first 10 rows
view_k_row(ts_sp)
# --- load patient demo ---
df_outc <- read_excel("./data/PAS Challenge Outcome Data.xlsx")
df_demo <- read_excel("./data/PAS Challenge Demographic Data.xlsx")
# --- brady 80 (heart rate < 80) ---
th <- 80
rows <- apply(ts_hr[,3:ncol(ts_hr)], 1, function(x) any(x < th))
ts_sub <- ts_hr[rows,3:ncol(ts_hr)]
view_k_row(ts_sub, i_row = 2, vs = 'HR')
# apply function threshold_events(x, th, "<") to each row (x) of dataframe ts_sub
events <- apply(ts_sub, 1, function(x) threshold_event(x, th = th, direction = "<"))
events <- apply(ts_sub, 1, function(x) threshold_event_extra(x, th = th, direction = "<"))
events <- apply(ts_sub, 1, function(x) threshold_event_filtered(x, th = th, direction = "<"))
events <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = th, plot=F, type = 1))
threshold_event_filtered <- function(x, th, direction = "<", plot = F){
events <- threshold_event_extra(x, th, direction)
events <- lapply(events, function(event) {
return(c(event,
"duration" = as.numeric(event['end'] - event['start'] + 1),
"drop_rate" = as.numeric(x[event['start']] - x[event['onset']]) / as.numeric(event['start'] - event['onset'] + 1),
"back_rate" = as.numeric(x[event['offset']] - x[event['end']]) / as.numeric(event['offset'] - event['end'] + 1)
)) })
if(length(events)>0){
# filter 1: duration in [5, 200) # filter 2: drop_rate < 0 and back_rate > 0
indices <- sapply(events, function(event) event['duration'] >= 5 & event['duration'] < 200 & event['drop_rate'] < 0 & event['back_rate'] > 0 )
events <- events[indices]
}
if(length(events)>0){
# Remove empty elements
events <- events[sapply(events, function(x) !is.null(x) && length(x) != 0)]
}
if(length(events)>0){
if(plot){
time_index <- seq_along(x)
for(event in events){
plot(time_index, x, type = "l", col = "blue", main = "Event timepoints", xlab = "Time", ylab = "Value", ylim = range(x))
points(event['start'], x[event['start']], col = "red", pch = 19, cex = 1)
points(event['end'], x[event['end']], col = "red", pch = 19, cex = 1)
points(event['onset'], x[event['onset']], col = "orange", pch = 19, cex = 1)
points(event['offset'], x[event['offset']], col = "orange", pch = 19, cex = 1)
}
}
}
return(events)
}
events <- apply(ts_sub, 1, function(x) describe_brady_event(x, th = th, plot=F, type = 1))
# sample 10 infants to take a look
for(i in sample(1:nrow(ts_sub),20) ){
# threshold_event_filtered(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T)
print(describe_brady_event(x=as.numeric(unlist(ts_sub[i,])), th=th, plot=T, type=4))
}
