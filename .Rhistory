load("./rob/gee_uniform.RData")
}
# the following correlation structures don't converge
# mdl_gee_cat_exch <- ordLORgee(y ~ rcs(age,3) + sex + tx + rcs(day,3) + catg(yfirst),
#                     data = df_mdl,
#                     id = df_mdl$id,
#                     link = "logit",
#                     bstart = coef(mdl_gee),
#                     LORstr = "category.exch"
#                     )#This option assumes a category exchangeable structure, meaning the local odds ratios are constant across different categories within the same time point, but they can vary between different time points.
# # bstart a vector that includes an initial estimate for the marginal regression parameter vector.
#
# load("./rob/gee_uniform.RData")
# mdl_gee_tim_exch <- ordLORgee(y ~ rcs(age,3) + sex + tx + rcs(day,3) + catg(yfirst),
#                     data = df_mdl,
#                     id = df_mdl$id,
#                     link = "probit",
#                     bstart = coef(mdl_gee_uniform),
#                     LORstr = "time.exch" ) #This option assumes a time exchangeable structure, where the local odds ratios are constant across different time points for the same category but can vary between different categories.
# ordinal random effects model, account for cluster heterogeneity using random intercept
if(!file.exists("./rob/re.RData")){
mdl_re <- clmm(y ~ rcs(age,3) + sex + tx + rcs(day,3) + (1 | id),
data = df_mdl,
link = "logit") # no hessian
summary(mdl_re)
AIC(mdl_re)  # 50410.32 = -2*mdl_re$logLik + 2*14
# this turns out to be the marginal AIC,
# they don't document which AIC their package is returning, marginal or conditional??!!
# dim(solve(mdl_re$Hessian))
# length(mdl_re$gradient)
# g <- as.matrix(mdl_re$gradient,ncol=14,nrow=1)
# fisher <- g  %*% t(g)
# sum(diag(solve(mdl_re$Hessian) %*% fisher))
mdl_re1 <- clmm(y ~ rcs(age,3) + sex + tx + rcs(day,3) + (1 + rcs(day,3) | id),
data = df_mdl,
link = "probit") # no hessian
summary(mdl_re1)
AIC(mdl_re1)  # 37560.25 yes!
mdl_re2 <- clmm(y ~ rcs(age,5) + sex + tx + rcs(day,5) + (1  + rcs(day,5) | id),
data = df_mdl,
link = "probit") # AIC =  # hessian not available
summary(mdl_re1)
AIC(mdl_re1)  # 37560.25 yes!
# library(brms)
# mdl_bre <- brm(y ~ age + sex + tx + day + (1|id), data=df_mdl, family=cumulative("logit"))
# LOO(mdl_bre)
save(mdl_re, mdl_re1, file="./rob/re.RData")
}else{
load("./rob/re.RData")
}
# ordinal random effects model, account for cluster heterogeneity using random intercept
if(!file.exists("./cor/re.RData")){
mdl_re_cor <- clmm(y ~ rcs(age,3) + sex + tx + yprev + rcs(day,5) + (1 | id),
data = df_mdl,
link = "logit") # no hessian
summary(mdl_re_cor)
AIC(mdl_re_cor)
# 1.01e-06 0.001005 random intercept variance
# this turns out to be the marginal AIC  = -2*mdl_re$logLik + 2*n_param
# they don't document which AIC their package is returning, marginal or conditional??!!
# dim(solve(mdl_re$Hessian))
# length(mdl_re$gradient)
# g <- as.matrix(mdl_re$gradient,ncol=14,nrow=1)
# fisher <- g  %*% t(g)
# sum(diag(solve(mdl_re$Hessian) %*% fisher))
save(mdl_re_cor, file="./cor/re.RData")
}else{
load("./cor/re.RData")
}
mdl_name <- c("Standard PO",
"Standard PO w/ lag1",
"GEE (indepedence)",
"GEE (uniform)",
"GEE (indepedence) w/ lag1",
"RE (1|id)",
"RE (1+rcs(day,3)|id)",
"RE (1|id) w/ lag1")
aic_name <- round(c(AIC(mdl_orm),
AIC(mdl_orm_cor),
AIC(mdl_rob),
NA,
AIC(mdl_rob_cor),
AIC(mdl_re),
AIC(mdl_re1),
AIC(mdl_re_cor)),2)
aic_name[is.na(aic_name)] <- "QIC NA"
treatment_odds_ratio <- c(exp(coef(mdl_orm)[["tx=Active"]]),
exp(coef(mdl_orm_cor)[["tx=Active"]]),
exp(coef(mdl_rob)[["tx=Active"]]),
exp(coef(mdl_gee_uniform)[["txActive"]]),
exp(coef(mdl_rob_cor)[["tx=Active"]]),
exp(coef(mdl_re)[["txActive"]]),
exp(coef(mdl_re1)[["txActive"]]),
exp(coef(mdl_re_cor)[["txActive"]]) )
treatment_p <- c("<0.0001",
0.2385,
0.0037,
0.0426,
0.2372,
0.0084,
0.373,
NA)
treatment_p[is.na(treatment_p)] <- "Hessian NA"
compare_table <- data.frame("Model" = mdl_name,
"AIC" = aic_name,
"Treatment Odds Ratio" = treatment_odds_ratio,
"p-value" = treatment_p)
compare_table <- rbind(compare_table[c(1,3,6),], compare_table[c(4,7),], compare_table[c(2,5,8),])
compare_table$temporal_correlation<-c(rep("none",3),
rep("implicit",2),
rep("explicit",3))
compare_table <- compare_table[,c("adjust_temporal_correlation",setdiff(colnames(compare_table),"temporal_correlation"))]
robcov(orm(y ~ rcs(age,3) + sex + tx*catg(yprev) + rcs(day,5), data=df_mdl, x=TRUE, y=TRUE), cluster = df_mdl$id)
# Generate prediction data
pred_data <- Predict(mdl_rob_cor)
# Create the plot
ggplot(pred_data, aes(x = x, y = yhat)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
facet_wrap(~ variable, scales = "free") +
labs(x = "Predictor Value", y = "Predicted Outcome",
title = "Predicted Relationships with Free Scales") +
theme_minimal()
pred_data
# Create the plot
ggplot(pred_data, aes(x = x, y = yhat)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
facet_wrap(~ .predictor., scales = "free") +
labs(x = "Predictor Value", y = "Predicted Outcome",
title = "Predicted Relationships with Free Scales") +
theme_minimal()
# Create the plot
ggplot(pred_data, aes(x = x, y = yhat)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
facet_wrap(~ predictor, scales = "free") +
labs(x = "Predictor Value", y = "Predicted Outcome",
title = "Predicted Relationships with Free Scales") +
theme_minimal()
pred_data$predictor <- pred_data$.predictor.
# Create the plot
ggplot(pred_data, aes(x = x, y = yhat)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
facet_wrap(~ predictor, scales = "free") +
labs(x = "Predictor Value", y = "Predicted Outcome",
title = "Predicted Relationships with Free Scales") +
theme_minimal()
pred_data
ggplot(Predict(mdl_rob_cor))
ggplot(Predict(mdl_rob_cor, age))
p_age <- ggplot(Predict(mdl_rob_cor, age))
p_age <- ggplot(Predict(mdl_rob_cor, age)) + ylim(0,5)
p_age
p_y_prev <- ggplot(Predict(mdl_rob_cor, y_prev))
p_y_prev
p_y_prev <- ggplot(Predict(mdl_rob_cor, y_prev))
p_yprev <- ggplot(Predict(mdl_rob_cor, yprev))
p_yprev
p_age <- ggplot(Predict(mdl_rob_cor, age))
p_day <- ggplot(Predict(mdl_rob_cor, day))
p_yprev <- ggplot(Predict(mdl_rob_cor, yprev))
p_tx <- ggplot(Predict(mdl_rob_cor, tx))
p_sex <- ggplot(Predict(mdl_rob_cor, sex))
ggarrange(p_age,p_day, p_yprev, p_tx, p_sex, ncol=3, nrow=2)
# ggplot(Predict(mdl_rob_cor))
p_age <- ggplot(Predict(mdl_rob_cor, age), ylim. = c(0,5))
p_age
p_age <- ggplot(Predict(mdl_rob_cor, age), ylim. = c(0,2))
p_day <- ggplot(Predict(mdl_rob_cor, day), ylim. = c(0,2))
p_yprev <- ggplot(Predict(mdl_rob_cor, yprev))
p_tx <- ggplot(Predict(mdl_rob_cor, tx))
p_sex <- ggplot(Predict(mdl_rob_cor, sex))
ggarrange(p_age,p_day, p_yprev, p_tx, p_sex, ncol=3, nrow=2)
p1 <- rms::bplot(rms::Predict(mdl_rob_cor, age, yprev), ylabrot=90,adj.subtitle=FALSE)
p2 <- rms::bplot(rms::Predict(mdl_rob_cor, day, yprev), ylabrot=90,adj.subtitle=FALSE)
p3 <- rms::bplot(rms::Predict(mdl_rob_cor, age, day),ylabrot=90,adj.subtitle=FALSE)
ggarrange(p1,p2,p3, ncol=3)
source("~/.active-rstudio-document", echo=TRUE)
# ggplot(Predict(mdl_rob_cor))
p_age <- ggplot(Predict(mdl_rob_cor, age, fun = exp), ylim. = c(0,2))
p_day <- ggplot(Predict(mdl_rob_cor, day, fun = exp), ylim. = c(0,2))
p_yprev <- ggplot(Predict(mdl_rob_cor, yprev, fun = exp))
p_tx <- ggplot(Predict(mdl_rob_cor, tx, fun = exp))
p_sex <- ggplot(Predict(mdl_rob_cor, sex, fun = exp))
ggarrange(p_age,p_day, p_yprev, p_tx, p_sex, ncol=2, nrow=3)
# pred_probs <- predict(mdl_rob, type = "fitted.ind")
# df_mdl$y_pred <- max.col(pred_probs, ties.method = "first")
# table(df_mdl$y_pred, df_mdl$y)
# ggplot(Predict(mdl_rob_cor))
p_age <- ggplot(Predict(mdl_rob_cor, age), ylim. = c(0,2))
p_day <- ggplot(Predict(mdl_rob_cor, day), ylim. = c(0,2))
p_yprev <- ggplot(Predict(mdl_rob_cor, yprev))
p_tx <- ggplot(Predict(mdl_rob_cor, tx))
p_sex <- ggplot(Predict(mdl_rob_cor, sex))
ggarrange(p_age,p_day, p_yprev, p_tx, p_sex, ncol=2, nrow=3)
# pred_probs <- predict(mdl_rob, type = "fitted.ind")
# df_mdl$y_pred <- max.col(pred_probs, ties.method = "first")
# table(df_mdl$y_pred, df_mdl$y)
# ggplot(Predict(mdl_rob_cor))
p_age <- ggplot(Predict(mdl_rob_cor, age), ylim. = c(0,2), ylab = "log odds of a worse outcome")
p_day <- ggplot(Predict(mdl_rob_cor, day), ylim. = c(0,2), ylab = "log odds of a worse outcome")
p_yprev <- ggplot(Predict(mdl_rob_cor, yprev))
p_tx <- ggplot(Predict(mdl_rob_cor, tx))
p_sex <- ggplot(Predict(mdl_rob_cor, sex))
ggarrange(p_age,p_day, p_yprev, p_tx, p_sex, ncol=2, nrow=3)
# pred_probs <- predict(mdl_rob, type = "fitted.ind")
# df_mdl$y_pred <- max.col(pred_probs, ties.method = "first")
# table(df_mdl$y_pred, df_mdl$y)
x <- rnorm(10000, 0,1)
x <- rnorm(10000, 0,1)
y <- 2*x
plot(x,y)
y <- 2*x^2
plot(x,y)
y <- 2*x^2 + rnorm(10000, 0, 0.1)
plot(x,y)
y <- 2*x^2 + rnorm(10000, 0, 0.5)
plot(x,y)
cor(x,y,method="spearman")
cor(x,y,method="pearson")
y <- 2*exp(x) + rnorm(10000, 0, 0.5)
cor(x,y,method="pearson")
cor(x,y,method="spearman")
citation(glmmTMB)
citation("glmmTMB")
?glmmTMB
??glmmTMB
citation("glmmTMB")
citation("R")
citation(R)
# 1. answer_df
# run "~/Documents/Documents JoyQiu Work/Research/ED Media/network/script/llm/data_clean_in_r_with_EOS.R" first
df_llm <- read.csv("/Users/joyqiu/Documents/Documents JoyQiu Work/Research/ED Media/network/script/llm/sm_eos.csv", stringsAsFactors = F)
answer_df <- df_llm[,c("sm_id", "text_w_eos")]
# answer_df1 <- answer_df[1:30000,]
# answer_df2 <- answer_df[30001:nrow(answer_df),]
# stopifnot(nrow(answer_df2) + nrow(answer_df1) == nrow(answer_df))
# setdiff(union(answer_df2$sm_id, answer_df1$sm_id), answer_df$sm_id)
# setdiff(answer_df$sm_id, union(answer_df2$sm_id, answer_df1$sm_id))
#
# write.csv(answer_df1, "/Users/joyqiu/Documents/Documents JoyQiu Work/Research/LLMTopicExtraction/llm_topic_extraction/data/answer_df_raw1.csv", row.names = F)
# write.csv(answer_df2, "/Users/joyqiu/Documents/Documents JoyQiu Work/Research/LLMTopicExtraction/llm_topic_extraction/data/answer_df_raw2.csv", row.names = F)
write.csv(answer_df, "/Users/joyqiu/Documents/Documents JoyQiu Work/Research/LLMTopicExtraction/llm_topic_extraction/data/answer_df_raw.csv", row.names = F)
read.csv("/Users/joyqiu/Documents/Documents JoyQiu Work/Research/ED Media/network/script/tmp/may2015.csv")
df <- read.csv("/Users/joyqiu/Documents/Documents JoyQiu Work/Research/ED Media/network/script/tmp/may2015.csv")
View(df)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../../")
print(getwd())
# --- load packages ---
library(readxl)
library(ggplot2)
library(reshape2)
# --- load functions ---
path = paste0("./script/Data/utils")
flst = list.files(path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
# --- load 10-minutes records ---
ts_hr <- read_excel("./data/PAS Challenge HR Data.xlsx")
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../../")
print(getwd())
# --- load packages ---
library(readxl)
library(ggplot2)
library(reshape2)
# --- load functions ---
path = paste0("./script/Data/utils")
flst = list.files(path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
# --- load 10-minutes records ---
ts_hr <- read_excel("./data/PAS Challenge HR Data.xlsx")
ts_sub <- ts_hr[,3:ncol(ts_hr)]
succ <- unlist(apply(ts_sub, 1, function(x) successive_increases(x)))
df_id <- ts_hr[,c(1:2)]
View(df_id)
df_id$succ_inc <- succ
succ
as.data.frame(succ)
df_succ <- as.data.frame(succ)
View(df_succ)
for (s in succ){
print(data.frame("uu" = s$uu, "uuu"= s$uuu))
}
succ[[1]]
succ[[2]]
succ <- unlist(apply(ts_sub, 1, function(x) successive_increases(x)))
succ <- apply(ts_sub, 1, function(x) successive_increases(x))
succ[[1]]
df_succ <- as.data.frame(succ)
View(df_succ)
for (s in succ){
print(data.frame("uu" = s$uu, "uuu"= s$uuu))
}
df_succ <- data.frame()
df_succ <- data.frame()
for (s in succ){
df_succ <- bind_rows(df_succ, data.frame("uu" = s$uu, "uuu"= s$uuu))
}
library(dplyr)
df_succ <- data.frame()
for (s in succ){
df_succ <- bind_rows(df_succ, data.frame("uu" = s$uu, "uuu"= s$uuu))
}
View(df_id)
df_succ <- bind_cols(df_id, df_succ)
View(df_succ)
succ <- apply(ts_sub, 1, function(x) successive_increases(x))
# df_succ <- data.frame()
# for (s in succ){
#   df_succ <- bind_rows(df_succ, data.frame("uu" = s$uu, "uuu"= s$uuu))
# }
df_succ <- do.call(rbind, lapply(succ, function(s) data.frame(uu = s$uu, uuu = s$uuu)))
df_succ <- do.call(rbind, lapply(succ, function(s) data.frame(uu = s$uu, uuu = s$uuu)))
df_id <- ts_hr[,c(1:2)]
View(df_succ)
df_train_y <- read.csv("./script/CLIP/tmp/df_train_y.csv",stringsAsFactors = T)
df_train_y <- read.csv("./script/CLIP/tmp/df_train_y.csv",stringsAsFactors = F)
df_train <- merge(df_succ, df_train_y)
View(df_train_y)
df_train <- merge(df_succ, df_train_y, by=c("VitalID", "VitalTime"))
df_succ[,c("VitalID", "VitalTime")]
ts_hr <- read_excel("./data/PAS Challenge HR Data.xlsx")
ts_sub <- ts_hr[,3:ncol(ts_hr)]
succ <- apply(ts_sub, 1, function(x) successive_increases(x))
df_succ <- do.call(rbind, lapply(succ, function(s) data.frame(uu = s$uu, uuu = s$uuu)))
df_id <- ts_hr[,c(1:2)]
df_succ <- bind_cols(df_id, df_succ)
df_train_y <- read.csv("./script/CLIP/tmp/df_train_y.csv",stringsAsFactors = F)
df_train <- merge(df_succ, df_train_y, by=c("VitalID", "VitalTime"))
ts_hr <- read_excel("./data/Test Data/Test HR Data.xlsx")
ts_sub <- ts_hr[,3:ncol(ts_hr)]
View(ts_sub)
succ <- apply(ts_sub, 1, function(x) successive_increases(x))
df_succ <- do.call(rbind, lapply(succ, function(s) data.frame(uu = s$uu, uuu = s$uuu)))
df_id <- ts_hr[,c(1:2)]
df_succ <- bind_cols(df_id, df_succ)
df_test_y <- read.csv("./script/CLIP/tmp/df_test_y.csv",stringsAsFactors = F)
df_test <- merge(df_succ, df_test_y, by=c("VitalID", "VitalTime"))
ts_hr[,c(1:2)]
df_test_y
# --- load 10-minutes records ---
ts_train <- read.csv("./script/CLIP/tmp/df_train.csv.zip",stringsAsFactors = F)
# --- load 10-minutes records ---
ts_train <- read_csv("./script/CLIP/tmp/df_train.csv.zip",stringsAsFactors = F)
ts_train <- read_csv("./script/CLIP/tmp/df_train.csv.zip")
ts_train <- readr::read_csv("./script/CLIP/tmp/df_train.csv.zip")
View(df_train)
View(ts_train)
ts <- readr::read_csv("./script/CLIP/tmp/df_train.csv.zip")
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../../")
print(getwd())
# --- load packages ---
library(readxl)
library(ggplot2)
library(reshape2)
library(dplyr)
# --- load functions ---
path = paste0("./script/Data/utils")
flst = list.files(path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
# --- load 10-minutes records ---
ts <- readr::read_csv("./script/CLIP/tmp/df_train.csv.zip")
succ <- apply(ts[,3:ncol(ts)], 1, function(x) successive_increases(x))
succ <- apply(ts[,4:ncol(ts)], 1, function(x) successive_increases(x))
df_succ <- do.call(rbind, lapply(succ, function(s) data.frame(uu = s$uu, uuu = s$uuu)))
df_succ <- bind_cols(ts[,c(1:3)], df_succ)
ts <- readr::read_csv("./script/CLIP/tmp/df_train.csv.zip")
succ <- apply(ts[,4:ncol(ts)], 1, function(x) successive_increases(x))
df_succ <- do.call(rbind, lapply(succ, function(s) data.frame(uu = s$uu, uuu = s$uuu)))
df_train <- bind_cols(ts[,c(1:3)], df_succ)
df_train$cl_event
df_train$y <- ifelse(df_train$cl_event=="This infant will survive.", 0,1)
succ <- apply(ts[,4:ncol(ts)], 1, function(x) successive_increases(x))
df_succ <- do.call(rbind, lapply(succ, function(s) data.frame(uu = s$uu, uuu = s$uuu)))
df_test <- bind_cols(ts[,c(1:3)], df_succ)
df_test$y <- ifelse(df_test$cl_event=="This infant will survive.", 0,1)
# ---- logistic regression ---
mdl <- glm(y~uuu,data = df_train)
View(mdl)
mdl
df_test$y_pred <- predict(mdl, newdata = df_test)
df_test$y_pred
# ---- logistic regression ---
mdl <- glm(y~uuu,data = df_train)
# predict in probability
df_test$y_pred <- predict(mdl, newdata = df_test)
View(df_test)
# --- calculate AUC ---
library(pROC)
roc_obj <- roc(df_test$y, df_test$y_pred)
auc_val <- auc(roc_obj)
auc_val
# --- calculate sensitivity and specificity ---
df_test$y_pred_class <- ifelse(df_test$y_pred > 0.5, 1, 0)
conf_mat <- table(df_test$y, df_test$y_pred_class)
sensitivity <- conf_mat[2,2] / sum(conf_mat[2,])
df_test$y_pred
hist(df_test$y_pred)
?predict
# ---- logistic regression ---
mdl <- glm(y~uuu,data = df_train, family = "binomial")
# predict in probability
df_test$y_pred <- predict(mdl, newdata = df_test)
df_test$y_pred
# predict in probability
df_test$y_pred <- predict(mdl, newdata = df_test, type="reponse")
# ---- logistic regression ---
mdl <- glm(y~uuu,data = df_train, family = "binomial")
# predict in probability
df_test$y_pred <- predict(mdl, newdata = df_test, type="response")
df_test$y_pred
# --- calculate AUC ---
library(pROC)
roc_obj <- roc(df_test$y, df_test$y_pred)
auc_val <- auc(roc_obj)
auc_val
plot(roc_obj)
df_train$umean = df_train$uu * 2 + df_train$uuu * 3
df_test$umean = df_test$uu * 2 + df_test$uuu * 3
# ---- logistic regression ---
mdl <- glm(y~uuu,data = df_train, family = "binomial")
# predict in probability
df_test$y_pred <- predict(mdl, newdata = df_test, type="response")
# --- calculate AUC ---
library(pROC)
roc_obj <- roc(df_test$y, df_test$y_pred)
auc(roc_obj)
plot(roc_obj)
df_test$y
df_test$y_pred
auc(roc_obj)
plot(roc_obj)
# ---- logistic regression ---
mdl <- glm(y~uuu,data = df_train, family = "binomial")
# predict in probability
df_train$y_pred <- predict(mdl, newdata = df_train, type="response")
df_test$y_pred <- predict(mdl, newdata = df_test, type="response")
auc(roc_obj <- roc(df_test$y, df_test$y_pred))
auc(roc_obj <- roc(df_train$y, df_train$y_pred))
auc(roc_obj <- roc(df_test$y, df_test$y_pred))
df_test %>%
group_by(y) %>%
sample_n(1000) %>%
ungroup()
# downsample 1000 from df_test$y == 0, keep all df_test$y == 1
df_test_neg <- sample(df_test[which(df_test$y==0)],1000)
# downsample 1000 from df_test$y == 0, keep all df_test$y == 1
df_test_neg <- sample(df_test[which(df_test$y==0),],1000)
df_test$y
table(df_test$y )
df_test[which(df_test$y==0),]
df_train_neg <- df_train[which(df_train$y==0),]
df_train_neg <- df_train_neg[sample(1:nrow(df_train_neg), 1000),]
df_train_mdl <- rbind(df_train[which(df_train$y==1),], df_train_neg)
df_test_neg <- df_test[which(df_test$y==0),]
df_test_neg <- df_test_neg[sample(1:nrow(df_test_neg), 1000),]
df_test_mdl <- rbind(df_test[which(df_test$y==1),], df_test_neg)
# --- load uu / uuu records ---
ts <- readr::read_csv("./script/CLIP/tmp/df_train.csv.zip")
succ <- apply(ts[,4:ncol(ts)], 1, function(x) successive_increases(x))
df_succ <- do.call(rbind, lapply(succ, function(s) data.frame(uu = s$uu, uuu = s$uuu)))
df_train <- bind_cols(ts[,c(1:3)], df_succ)
df_train$y <- ifelse(df_train$cl_event=="This infant will survive.", 0,1)
df_train$umean = df_train$uu * 2 + df_train$uuu * 3
df_train_neg <- df_train[which(df_train$y==0),]
df_train_neg <- df_train_neg[sample(1:nrow(df_train_neg), 1000),]
df_train_mdl <- rbind(df_train[which(df_train$y==1),], df_train_neg)
ts <- readr::read_csv("./script/CLIP/tmp/df_test.csv.zip")
succ <- apply(ts[,4:ncol(ts)], 1, function(x) successive_increases(x))
df_succ <- do.call(rbind, lapply(succ, function(s) data.frame(uu = s$uu, uuu = s$uuu)))
df_test <- bind_cols(ts[,c(1:3)], df_succ)
df_test$y <- ifelse(df_test$cl_event=="This infant will survive.", 0,1)
df_test$umean = df_test$uu * 2 + df_test$uuu * 3
# downsample 1000 from df_test$y == 0, keep all df_test$y == 1
df_test_neg <- df_test[which(df_test$y==0),]
df_test_neg <- df_test_neg[sample(1:nrow(df_test_neg), 1000),]
df_test_mdl <- rbind(df_test[which(df_test$y==1),], df_test_neg)
# ---- logistic regression ---
mdl <- glm(y~uuu,data = df_train, family = "binomial")
# predict in probability
df_train$y_pred <- predict(mdl, newdata = df_train, type="response")
df_test$y_pred <- predict(mdl, newdata = df_test, type="response")
# --- calculate AUC ---
library(pROC)
auc(roc_obj <- roc(df_train$y, df_train$y_pred))
auc(roc_obj <- roc(df_test$y, df_test$y_pred))
# ---- logistic regression ---
mdl <- glm(y~uuu,data = df_train_mdl, family = "binomial")
# predict in probability
df_train_mdl$y_pred <- predict(mdl, newdata = df_train_mdl, type="response")
df_test_mdl$y_pred <- predict(mdl, newdata = df_test_mdl, type="response")
# --- calculate AUC ---
library(pROC)
auc(roc_obj <- roc(df_train_mdl$y, df_train_mdl$y_pred))
auc(roc_obj <- roc(df_test_mdl$y, df_test_mdl$y_pred))
plot(roc_obj)
# ---- logistic regression ---
mdl <- glm(y~umean,data = df_train_mdl, family = "binomial")
# predict in probability
df_train_mdl$y_pred <- predict(mdl, newdata = df_train_mdl, type="response")
df_test_mdl$y_pred <- predict(mdl, newdata = df_test_mdl, type="response")
# --- calculate AUC ---
library(pROC)
auc(roc_obj <- roc(df_train_mdl$y, df_train_mdl$y_pred))
auc(roc_obj <- roc(df_test_mdl$y, df_test_mdl$y_pred)) # 0.78 - 0.79
